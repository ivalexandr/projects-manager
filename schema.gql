# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ProjectInTeam {
  id: ID!
  title: String!
  description: String!
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type TeamChatMesssage {
  id: ID!
  createdAt: DateTime!
  teamChat: TeamChat!
  sender: User!
  message: String!
}

type TeamChat {
  id: ID!
  team: Team!
  messages: [TeamChatMesssage!]!
}

type Team {
  id: ID!
  name: String!
  description: String
  avatar: String
  banner: String
  leader: User!
  status: TeamStatus!
  projects: [ProjectInTeam!]!
  isPublic: Boolean!
  createdAt: DateTime!
  teamChat: TeamChat!
}

enum TeamStatus {
  ACTIVE
  INACTIVE
  DISBANDED
  FROZEN
  ARCHIVED
}

type TeamAccess {
  id: ID!
  team: Team!
  user: User!
  teamRole: TeamRole!
  status: TeamAccessStatus!
}

enum TeamRole {
  LEADER
  MODERATOR
  PARTICIPANT
}

enum TeamAccessStatus {
  PENDING
  DECLINED
  ACTIVE
  INACTIVE
}

type User {
  id: ID!
  name: String
  username: String!
  email: String!
  createdAt: DateTime!
  teamAccesses: [TeamAccess!]!
}

type Project {
  id: ID!
  title: String!
  description: String!
  createdAt: DateTime!
  team: Team!
}

type TeamActivePaginated {
  items: [Team!]!
  totalCount: Int!
}

type Query {
  getUser(id: String!): User!
  getProject(id: ID!): Project!
  getProjectsForTeam(teamId: ID!): [ProjectInTeam!]!
  getTeam(id: ID!): Team!
  getActivePublicTeam(page: Int!, pageSize: Int!): TeamActivePaginated!
  getMessagesForChat(chatId: ID!, lastMessageId: ID, limit: Int): [TeamChatMesssage!]!
  getTeamAccesses: [TeamAccess!]!
  getTeamAccess(teamId: ID!): TeamAccess!
  getTeamAccessesForTeam(teamId: ID!): [TeamAccess!]!
}

type Mutation {
  createProject(create: CreateProjectInput!): ProjectInTeam!
  updateProject(update: UpdateProjectInput!): Project!
  createTeam(create: CreateTeamInput!): TeamAccess!
  inviteUserToTeam(create: CreateTeamAcceessInput!): TeamAccess!
  acceptingInvitation(teamId: ID!, isAnswer: Boolean!): TeamAccess!
  removeTeamAccess(teamAccessId: ID!): TeamAccess!
}

input CreateProjectInput {
  title: String!
  description: String!
  teamId: String!
}

input UpdateProjectInput {
  id: String!
  title: String
  description: String
}

input CreateTeamInput {
  name: String!
  description: String!
  avatar: String
  banner: String
  isPublic: Boolean
}

input CreateTeamAcceessInput {
  username: String!
  teamId: ID!
  teamRole: TeamRole!
}